The initial centroids (means) for three clusters are:

Cluster 1: (2, 3)
Cluster 2: (3, 3)
Cluster 3: (5, 4)
Let's implement the K-means algorithm using Python.


import numpy as np

# Initial data points
data = np.array([
    [1, 1],
    [1, 2],
    [2, 1],
    [2, 3],
    [3, 3],
    [4, 5],
    [5, 4],
    [6, 5]
])

# Initial centroids
centroids = np.array([
    [2, 3],
    [3, 3],
    [5, 4]
])

def euclidean_distance(point, centroid):
    """Calculate Euclidean distance between a point and a centroid."""
    return np.sqrt(np.sum((point - centroid) ** 2))

def assign_clusters(data, centroids):
    """Assign each data point to the nearest centroid."""
    clusters = {}
    for i in range(len(centroids)):
        clusters[i] = []
    for point in data:
        distances = [euclidean_distance(point, centroid) for centroid in centroids]
        closest_centroid = np.argmin(distances)
        clusters[closest_centroid].append(point)
    return clusters

def calculate_new_centroids(clusters):
    """Calculate the new centroids as the mean of assigned points."""
    new_centroids = []
    for key in clusters:
        cluster_mean = np.mean(clusters[key], axis=0)
        new_centroids.append(cluster_mean)
    return np.array(new_centroids)

def calculate_sse(clusters, centroids):
    """Calculate the Sum of Squared Error (SSE) for the clusters."""
    sse = 0
    for key in clusters:
        centroid = centroids[key]
        for point in clusters[key]:
            sse += euclidean_distance(point, centroid) ** 2
    return sse

# K-means algorithm
max_iterations = 10
for iteration in range(max_iterations):
    # Step 1: Assign points to the nearest centroid
    clusters = assign_clusters(data, centroids)
    
    # Step 2: Calculate new centroids
    new_centroids = calculate_new_centroids(clusters)
    
    # Calculate SSE for this iteration
    sse = calculate_sse(clusters, centroids)
    
    # Print the iteration details
    print(f"Iteration {iteration + 1}")
    print("Clusters:", clusters)
    print("New Centroids:", new_centroids)
    print("Sum of Squared Error (SSE):", sse)
    print("\n" + "-"*50 + "\n")
    
    # Check for convergence (if centroids do not change)
    if np.allclose(centroids, new_centroids):
        print("Convergence reached.")
        break
    
    # Update centroids
    centroids = new_centroids

Explanation of the Code
Data Points: We define the data points as a NumPy array.
Initial Centroids: We set the initial centroids as given.
Functions:
euclidean_distance: Calculates the Euclidean distance between a point and a centroid.
assign_clusters: Assigns each data point to the nearest centroid.
calculate_new_centroids: Calculates the new centroids by taking the mean of all points in each cluster.
calculate_sse: Calculates the Sum of Squared Error (SSE) for the current clustering.
K-means Algorithm:
For each iteration, we:
Assign points to clusters.
Calculate new centroids.
Calculate the SSE for the current clustering.
Print the clusters, new centroids, and SSE.
Check for convergence by comparing the old and new centroids.
Output
The output will display each iteration, showing the clusters formed, the new centroids, and the SSE. The algorithm stops when convergence is reached, 
meaning the centroids no longer change.

Explanation of Sum of Squared Error (SSE)
The SSE is calculated by summing the squared distances between each point and its assigned centroid. 
This value represents the compactness of the clustersâ€”the lower the SSE, the more compact the clusters are around their centroids.

### Output of python
Iteration 1
Clusters: {0: [array([1, 1]), array([1, 2]), array([2, 1]), array([2, 3])], 1: [array([3, 3])], 2: [array([4, 5]), array([5, 4]), array([6, 5])]}
New Centroids: [[1.5        1.75      ]
 [3.         3.        ]
 [5.         4.66666667]]
Sum of Squared Error (SSE): 15.000000000000002

--------------------------------------------------

Iteration 2
Clusters: {0: [array([1, 1]), array([1, 2]), array([2, 1])], 1: [array([2, 3]), array([3, 3])], 2: [array([4, 5]), array([5, 4]), array([6, 5])]}
New Centroids: [[1.33333333 1.33333333]
 [2.5        3.        ]
 [5.         4.66666667]]
Sum of Squared Error (SSE): 5.604166666666666

--------------------------------------------------

Iteration 3
Clusters: {0: [array([1, 1]), array([1, 2]), array([2, 1])], 1: [array([2, 3]), array([3, 3])], 2: [array([4, 5]), array([5, 4]), array([6, 5])]}
New Centroids: [[1.33333333 1.33333333]
 [2.5        3.        ]
 [5.         4.66666667]]
Sum of Squared Error (SSE): 4.499999999999999

--------------------------------------------------

Convergence reached.
